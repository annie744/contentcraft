import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { MeetingContent } from "@shared/schema";
import { Copy, Send } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { publishSocialPost } from "@/lib/api";
import { getSocialPlatform } from "@/lib/social-platforms";

interface SocialMediaPostProps {
  post: MeetingContent;
  meetingId: number;
}

export default function SocialMediaPost({ post, meetingId }: SocialMediaPostProps) {
  const [isExpanded, setIsExpanded] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  const platform = post.platform ? getSocialPlatform(post.platform) : null;
  
  const publishMutation = useMutation({
    mutationFn: () => publishSocialPost(post.id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/meetings', meetingId, 'contents'] });
      toast({
        title: "Post published",
        description: `Your post has been published to ${platform?.name}`,
      });
    },
    onError: (error) => {
      toast({
        title: "Publishing failed",
        description: error.message || "Failed to publish post",
        variant: "destructive"
      });
    }
  });
  
  const copyToClipboard = () => {
    navigator.clipboard.writeText(post.content);
    toast({
      title: "Copied to clipboard",
      description: "Post content has been copied to your clipboard",
    });
  };
  
  // If no platform, can't render properly
  if (!platform) return null;
  
  const PlatformIcon = platform.icon;
  
  return (
    <Card className="mb-8 bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden">
      <CardHeader className="px-4 py-5 border-b border-gray-200 bg-gray-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <PlatformIcon className="h-8 w-8" style={{ color: platform.color }} />
            <h3 className="ml-2 text-base font-medium text-gray-900">{platform.name} Post</h3>
          </div>
          <div className="flex space-x-2">
            {post.status === 'published' ? (
              <Badge className="bg-green-100 text-green-800">
                Published
              </Badge>
            ) : (
              <Badge className="bg-blue-100 text-blue-800">
                Draft
              </Badge>
            )}
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="px-4 py-5">
        {post.imageUrl && (
          <img 
            src={post.imageUrl} 
            alt="Social media post image" 
            className="w-full h-auto rounded-lg mb-4"
          />
        )}
        
        <div className="prose max-w-none text-gray-700">
          <div className={isExpanded ? '' : 'line-clamp-6'}>
            {post.content}
          </div>
          
          {post.content.length > 300 && !isExpanded && (
            <button 
              onClick={() => setIsExpanded(true)}
              className="text-primary-600 hover:text-primary-700 text-sm font-medium mt-2"
            >
              Read more
            </button>
          )}
        </div>
        
        <div className="mt-6 flex items-center justify-between">
          <div>
            <span className="text-xs text-gray-500">
              {post.automationId ? 'Generated by automation' : 'Custom generated post'}
            </span>
          </div>
          <div className="flex space-x-3">
            <Button 
              variant="outline" 
              onClick={copyToClipboard}
            >
              <Copy className="mr-2 h-4 w-4" />
              Copy
            </Button>
            
            {post.status !== 'published' && (
              <Button 
                onClick={() => publishMutation.mutate()}
                disabled={publishMutation.isPending}
              >
                <Send className="mr-2 h-4 w-4" />
                {publishMutation.isPending ? 'Posting...' : 'Post'}
              </Button>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
